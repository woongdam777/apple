SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, SALARY, PHONE, EMAIL, JOB_CODE 
FROM EMPLOYEE NATURAL JOIN JOB LEFT JOIN DEPARTMENT ON(DEPT_ID=DEPT_CODE)
WHERE ENT_YN='N' 
ORDER BY DEPT_CODE;

SELECT EMP_ID, EMP_NAME, SALARY, PHONE, EMAIL, DEPT_CODE 
FROM EMPLOYEE JOIN DEPARTMENT ON(DEPT_ID=DEPT_code)
WHERE ENT_YN='N' 
ORDER BY DEPT_CODE;

// 현재 퇴직한 사원의
		// 사번, 이름, 전화번호, 이메일, 퇴사일을
		// 퇴사일 오름차순으로 조회
;

SELECT EMP_ID, EMP_NAME, PHONE, EMAIL, ENT_DATE
FROM EMPLOYEE WHERE ENT_YN = 'Y' ORDER BY ENT_DATE

;

// 사번을 입력 받아 일치하는 사원의  
		// 사번, 이름, 부서명, 직급명, 급여, 전화번호, 이메일, 입사일, 퇴직여부 조회
		// 단, 사번이 일치하는 사원이 없으면
		// "사번이 일치하는 사원이 없습니다" 출력
		
		;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, SALARY, PHONE, EMAIL, HIRE_DATE, ENT_YN 
FROM EMPLOYEE NATURAL JOIN JOB LEFT JOIN DEPARTMENT ON(DEPT_ID=DEPT_CODE) WHERE EMP_ID=200

;

e.setEmpName(empName);
		e.setEmpNo(empNo);
		e.setEmail(email);
		e.setPhone(phone);
		e.setDeptCode(deptCode);
		e.setJobCode(jobCode);
		e.setSalLevel(salLevel);
		e.setSalary(salary);
		e.setBonus(bonus);
		e.setManagerId(managerId);
	
;

SELECT * FROM EMPLOYEE

;

INSERT INTO EMPLOYEE VALUES(SEQ_EMP_ID.NEXTVAL, EMP_NAME, EMP_NO, EMAIL, PHONE, DEPT_CODE, JOB_CODE, SAL_LEVEL, SALARY, BONUS, MANAGER_ID, SYSDATE, NULL, 'N')


;

update EMPLOYEE SET emp_id=224 WHERE emp_id=225;

;

DROP SEQUENCE seq_emp_id;

CREATE SEQUENCE seq_emp_id
START WITH 225


COMMIT;


update EMPLOYEE SET email=?, phone=?, BONUS=?, SALARY=? WHERE emp_id=?;

;

DELETE FROM EMPLOYEE WHERE EMP_ID=?

;

SELECT * FROM (
	SELECT EMP_ID, EMP_NAME, DEPT_TITLE, HIRE_DATE
	FROM EMPLOYEE LEFT JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
	ORDER BY HIRE_DATE DESC)
WHERE ROWNUM <= 5

;

SELECT NVL(DEPT_TITLE,'소속없음') DEPT_TITLE, COUNT(*) PEOPLE, TO_CHAR(ROUND(AVG(SALARY)), 'L999,999,999') SALARY
FROM EMPLOYEE LEFT JOIN DEPARTMENT ON(DEPT_CODE=DEPT_ID)
GROUP BY DEPT_TITLE, DEPT_CODE
ORDER BY DEPT_CODE


;

SELECT dept_id, dept_title
FROM DEPARTMENT 
ORDER BY 1


;

-- 입력받은 사번을 가진 사원이 존재하지 않으면 0
-- 사워은 있는데 퇴직처리된 사원이면 1
-- 사원도 있고 재직중인 사원이면 2 조회
SELECT
	CASE 
		WHEN (SELECT COUNT(*) FROM EMPLOYEE WHERE EMP_ID=227)=0 THEN 0
		ELSE (SELECT DECODE(ENT_YN, 'N', 1, 'Y', 2) FROM EMPLOYEE WHERE EMP_ID=227)
	END "CHECK"
FROM DUAL

;

SELECT DECODE(ENT_YN, 'N', 1, 'Y', 2) FROM EMPLOYEE WHERE EMP_ID=221

;